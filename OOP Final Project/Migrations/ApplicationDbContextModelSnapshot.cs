// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OOP_Final_Project.Data;

#nullable disable

namespace OOP_Final_Project.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("OOP_Final_Project.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("UserName", "Password")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClinicId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("ClinicId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.DocumentAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AppointmentId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeBook")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TimeEnd")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TimeStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("AppointmentId1");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("DocumentAppointments");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.DocumentBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("TEXT");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReceptionistId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ReceptionistId");

                    b.ToTable("DocumentBills");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.DocumentCancel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeCancel")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("DocumentCancels");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.DocumentDiagnose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DiagnoseDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSick")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PatientStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("DocumentDiagnoses");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.DocumentPrescribe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PharmacistId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("PharmacistId");

                    b.HasIndex("PrescriptionId")
                        .IsUnique();

                    b.ToTable("DocumentPrescribes");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.EmployeeSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeTo")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("EmployeeSchedules");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImporterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedicineTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ImporterId");

                    b.HasIndex("MedicineTypeId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.MedicineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MedicineTypes");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.PrescriptionMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DosageAmount")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FrequencyUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MedicineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionMedicines");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Date")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TimeEnd")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TimeStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Account", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Appointment", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.Employee", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("OOP_Final_Project.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Department", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.AccountType", "AccountType")
                        .WithMany("Departments")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("OOP_Final_Project.Models.Clinic", "Clinic")
                        .WithMany("Departments")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.DocumentAppointment", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.Appointment", "Appointment")
                        .WithOne("DocumentAppointment")
                        .HasForeignKey("OOP_Final_Project.Models.DocumentAppointment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOP_Final_Project.Models.Appointment", null)
                        .WithMany("DocumentAppointments")
                        .HasForeignKey("AppointmentId1");

                    b.HasOne("OOP_Final_Project.Models.DocumentType", "DocumentType")
                        .WithMany("DocumentAppointments")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.DocumentBill", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.Appointment", "Appointment")
                        .WithOne("DocumentBill")
                        .HasForeignKey("OOP_Final_Project.Models.DocumentBill", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOP_Final_Project.Models.DocumentType", "DocumentType")
                        .WithMany("DocumentBills")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOP_Final_Project.Models.Employee", "Receptionist")
                        .WithMany("DocumentBills")
                        .HasForeignKey("ReceptionistId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("DocumentType");

                    b.Navigation("Receptionist");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.DocumentCancel", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.Appointment", "Appointment")
                        .WithOne("DocumentCancel")
                        .HasForeignKey("OOP_Final_Project.Models.DocumentCancel", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOP_Final_Project.Models.DocumentType", "DocumentType")
                        .WithMany("DocumentCancels")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.DocumentDiagnose", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.Appointment", "Appointment")
                        .WithOne("DocumentDiagnose")
                        .HasForeignKey("OOP_Final_Project.Models.DocumentDiagnose", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOP_Final_Project.Models.DocumentType", "DocumentType")
                        .WithMany("DocumentDiagnoses")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.DocumentPrescribe", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.DocumentType", "DocumentType")
                        .WithMany("DocumentPrescribes")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOP_Final_Project.Models.Employee", "Pharmacist")
                        .WithMany("DocumentPrescribes")
                        .HasForeignKey("PharmacistId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("OOP_Final_Project.Models.Prescription", "Prescription")
                        .WithOne("DocumentPrescribe")
                        .HasForeignKey("OOP_Final_Project.Models.DocumentPrescribe", "PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Pharmacist");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Employee", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.Account", "Account")
                        .WithOne("Employee")
                        .HasForeignKey("OOP_Final_Project.Models.Employee", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.EmployeeSchedule", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.Employee", "Employee")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("OOP_Final_Project.Models.Schedule", "Schedule")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Medicine", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.Employee", "Importer")
                        .WithMany("Medicines")
                        .HasForeignKey("ImporterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("OOP_Final_Project.Models.MedicineType", "MedicineType")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Importer");

                    b.Navigation("MedicineType");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Patient", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.Account", "Account")
                        .WithOne("Patient")
                        .HasForeignKey("OOP_Final_Project.Models.Patient", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Prescription", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.Appointment", "Appointment")
                        .WithOne("Prescription")
                        .HasForeignKey("OOP_Final_Project.Models.Prescription", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.PrescriptionMedicine", b =>
                {
                    b.HasOne("OOP_Final_Project.Models.Medicine", "Medicine")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOP_Final_Project.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Account", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.AccountType", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Appointment", b =>
                {
                    b.Navigation("DocumentAppointment");

                    b.Navigation("DocumentAppointments");

                    b.Navigation("DocumentBill");

                    b.Navigation("DocumentCancel");

                    b.Navigation("DocumentDiagnose");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Clinic", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.DocumentType", b =>
                {
                    b.Navigation("DocumentAppointments");

                    b.Navigation("DocumentBills");

                    b.Navigation("DocumentCancels");

                    b.Navigation("DocumentDiagnoses");

                    b.Navigation("DocumentPrescribes");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DocumentBills");

                    b.Navigation("DocumentPrescribes");

                    b.Navigation("EmployeeSchedules");

                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Medicine", b =>
                {
                    b.Navigation("PrescriptionMedicines");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.MedicineType", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Prescription", b =>
                {
                    b.Navigation("DocumentPrescribe")
                        .IsRequired();

                    b.Navigation("PrescriptionMedicines");
                });

            modelBuilder.Entity("OOP_Final_Project.Models.Schedule", b =>
                {
                    b.Navigation("EmployeeSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
