@using System.Net.Http.Json
@model OOP_Final_Project.ViewModels.DoctorViewModel

<div class="px-5">
    <!-- Header Section -->
    <div class=" " style="padding-top: 64px;">
        <div class="  d-flex justify-content-between align-items-center mb-4">
            <h3 class="mb-0">Appointments</h3>

            <div class="btn btn-outline-dark shadow-sm" id="makeNewAppointmentBtn" data-bs-toggle="modal"
                data-patients='@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Patients))'
                data-doctor="@Model.Doctor.FirstName @Model.Doctor.LastName" data-bs-target="#newAppointmentModal"
                onclick="openNewAppoinmentModal(this)">Make new appointment</div>
        </div>
    </div>


    <hr>

    <!-- Statistics Section -->
    <div class="my-4 d-flex flex-wrap" style="justify-content: space-between;">
        <!-- Total Appointments -->
        <div class="col-md-3 d-flex flex-column">
            <div class="card quick-access-card text-center shadow-sm"
                style="background-color: white; border-radius: 16px;">
                <div class="card-body p-3 pb-2 d-flex flex-column g-2">
                    <div class="d-flex flex-column align-items-start gap-md-2" style="align-items: center;">
                        <div class="text-muted">Total Appointments</div>
                        <div class="d-flex gap-md-2 align-items-center">
                            <h3 class="mb-0 pb-0 ">@Model.AppointmentCount</h3>
                            <small class="text-success">
                                @* TODO: Change this *@
                                <i class="fas fa-arrow-circle-up"></i> 10% from last month
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Future Appointments -->
        <div class="col-md-3 d-flex flex-column">
            <div class="card quick-access-card text-center shadow-sm"
                style="background-color: white; border-radius: 16px;">
                <div class="card-body p-3 pb-2 d-flex flex-column g-2">
                    <div class="d-flex flex-column align-items-start gap-md-2" style="align-items: center;">
                        <div class="text-muted">Future Appointments</div>
                        <div class="d-flex gap-md-2 align-items-center">
                            <h3 class="mb-0">@Model.FutureAppointmentCount</h3>
                            <small>in the next 30 days</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Completed Appointments -->
        <div class="col-md-3 d-flex flex-column">
            <div class="card quick-access-card text-center shadow-sm"
                style="background-color: white; border-radius: 16px;">
                <div class="card-body p-3 pb-2 d-flex flex-column g-2">
                    <div class="d-flex flex-column align-items-start gap-md-2" style="align-items: center;">
                        <div class="text-muted">Completed Appointments</div>
                        <div class="d-flex gap-md-4 align-items-center">
                            <h3 class="mb-0 text-success">@Model.CompletedAppointmentCount</h3>
                            <small class="text-success">
                                <i class="fas fa-check-circle"></i> 95%
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Cancelled Appointments -->
        <div class="col-md-2 d-flex flex-column" style="flex: 0 0 auto; width: 16.66666667%;">
            <div class="card quick-access-card text-center shadow-sm"
                style="background-color: white; border-radius: 16px;">
                <div class="card-body p-3 pb-2 d-flex flex-column ">
                    <div class="d-flex flex-column align-items-start gap-md-2" style="align-items: center;">
                        <div class="text-muted">Cancelled</div>
                        <div class="d-flex gap-md-2 align-items-center">
                            <h3 class="mb-0 text-danger">@Model.CancelledAppointmentCount</h3>
                            <small class="text-danger">
                                <i class="fas fa-times-circle"></i> 4%
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Upcoming Appointments Section -->
    <div class="card rounded-16px mb-4 shadow-sm p-4" style="background-color: #ffffff;">
        <!-- Filters and Buttons -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div class="d-flex gap-md-2">
                <!-- View Options -->
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-dark" id="btnToday"
                        onclick="loadAppointments('today')">Today</button>
                    <button type="button" class="btn btn-outline-dark" id="btnAll"
                        onclick="loadAppointments('all')">View All</button>
                    <button type="button" class="btn btn-outline-dark" id="btnPrevious"
                        onclick="loadAppointments('previous')">Previous</button>

                </div>

                <!-- Sort Options -->
                <div>
                    <select id="sortTime" class="form-select w-auto " onchange="sortAppointments()">
                        <option value="none">None</option>
                        <option value="asc">Ascending</option>
                        <option value="desc">Descending</option>
                    </select>
                </div>

                <!-- Date Filter -->
                <div id="dateFilterContainer" style="display: none;">
                    <input type="date" id="dateFilter" class="form-control d-inline-block w-auto"
                        onchange="filterAppointmentsByDate()">
                </div>
            </div>

            <!-- Search Input -->
            <div class="input-group w-25">
                <span class="input-group-text text-muted">
                    <i class="fas fa-search"></i>
                </span>

                <input type="text" class="form-control" id="searchInput" placeholder="Search"
                    oninput="searchAppointments()" autocomplete="off">
            </div>
        </div>


        <!-- Appointments Table -->
        <table class="table table-hover table-bordered shadow-sm text-center " id="appointmentsTable">
            <thead class="table-light">
                <tr>
                    <th style="font-weight: 400; width: 20%;">Patient Name</th>
                    <th style="font-weight: 400; width: 20%;">Appointment Date</th>
                    <th style="font-weight: 400; width: 20%;">Appointment Time</th>
                    <th style="font-weight: 400; width: 20%;">Reason for Visit</th>
                    <th style="font-weight: 400; width: 20%;">Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Appointment rows will be loaded here -->
            </tbody>
        </table>

        <!-- Pagination Controls -->
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item">
                    <button class="page-link" id="prevPage" onclick="changePage(-1)">Previous</button>
                </li>
                <li class="page-item">
                    <span class="page-link" id="currentPage">1</span>
                </li>
                <li class="page-item">
                    <button class="page-link" id="nextPage" onclick="changePage(1)">Next</button>
                </li>
            </ul>
        </nav>

    </div>
</div>

<div>
    @await Html.PartialAsync("Modals/_newAppointmentModal")
    @await Html.PartialAsync("Modals/_HealthCheckModal")
    @await Html.PartialAsync("Modals/_appointmentDetailsModal")

</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<script>


    let currentPage = 1;
    const rowsPerPage = 10;

    function loadAppointments(view, page = 1) {
        // Update button styles
        updateButtonStyles(view);

        let url = `/Employees/EmployeeLayout?handler=LoadPartial&section=AppointmentTableRows&view=${view}&page=${page}&rowsPerPage=${rowsPerPage}`;
        fetch(url)
            .then(response => response.text())
            .then(html => {
                document.querySelector('#appointmentsTable tbody').innerHTML = html;
                document.getElementById('currentPage').textContent = page;
            })
            .catch(error => console.error('Error loading appointments:', error));
    }

    function changePage(direction) {
        currentPage += direction;
        if (currentPage < 1) currentPage = 1;
        loadAppointments('all', currentPage);
    }



    document.addEventListener('DOMContentLoaded', function () {
        loadAppointments('today');
    });


    function updateButtonStyles(view) {
        const buttonMapping = {
            'today': 'btnToday',
            'all': 'btnAll',
            'previous': 'btnPrevious'
        };

        Object.entries(buttonMapping).forEach(([key, buttonId]) => {
            const button = document.getElementById(buttonId);
            if (view === key) {
                button.classList.remove('btn-outline-dark');
                button.classList.add('btn-dark');
            } else {
                button.classList.remove('btn-dark');
                button.classList.add('btn-outline-dark');
            }
        });
    }

    let selectedRow = null; // To store the selected row for marking as done

    document.getElementById("makeNewAppointmentBtn").addEventListener("click", function () {
        var modal = new bootstrap.Modal(document.getElementById('newAppointmentModal'), {
            backdrop: false
        });
        modal.show();
    });

    function searchAppointments() {
        const searchInput = document.getElementById("searchInput").value.toLowerCase();
        const rows = document.querySelectorAll("#appointmentsTable tbody tr");

        rows.forEach(row => {
            const rowText = row.textContent.toLowerCase();
            row.style.display = rowText.includes(searchInput) ? "" : "none";
        });
    }

    function filterAppointmentsByDate() {
        const dateFilter = document.getElementById("dateFilter").value;
        const rows = document.querySelectorAll("#appointmentsTable tbody tr");

        rows.forEach(row => {
            const appointmentDate = row.cells[1].textContent; // Get appointment date from second column
            row.style.display = dateFilter && appointmentDate !== dateFilter ? "none" : "";
        });
    }

    function sortAppointments() {
        const sortOption = document.getElementById("sortTime").value;
        const table = document.getElementById("appointmentsTable");
        const rows = Array.from(table.querySelectorAll("tbody tr"));

        if (sortOption === "none") {
            // Reload the appointments to reset the order
            loadAppointments('all');
        } else {
            rows.sort((rowA, rowB) => {
                const timeA = rowA.cells[2].textContent; // Get appointment time from third column
                const timeB = rowB.cells[2].textContent;

                return sortOption === "asc" ? timeA.localeCompare(timeB) : timeB.localeCompare(timeA);
            });

            const tbody = table.querySelector("tbody");
            rows.forEach(row => tbody.appendChild(row));
        }
    }

    function openHealthCheckModal(button) {
        if (!button || !button.closest) {
            console.error('Invalid button element passed:', button);
            return;
        }

        const patientID = button.getAttribute('data-patient-id') || "N/A";
        const patientName = button.getAttribute('data-patient-name') || "N/A";
        const patientPhone = button.getAttribute('data-patient-phone') || "N/A";
        const patientEmail = button.getAttribute('data-patient-email') || "N/A";
        const patientAddress = button.getAttribute('data-patient-address') || "N/A";
        const patientLatestVisit = button.getAttribute('data-patient-latest-visit') || "N/A";

        document.getElementById('healthCheckPatientID').value = patientID;
        document.getElementById('healthCheckPatientName').value = patientName;
        document.getElementById('healthCheckPatientPhone').value = patientPhone;
        document.getElementById('healthCheckPatientEmail').value = patientEmail;
        document.getElementById('healthCheckPatientAddress').value = patientAddress;
        document.getElementById('healthCheckPatientLatestVisit').value = patientLatestVisit;

        const modal = new bootstrap.Modal(document.getElementById('healthCheckModal'));
        modal.show();
    }

    function openAppointmentDetailsModal(button) {

        if (!button || !button.closest) {
            console.error('Invalid button element passed:', button);
            return;
        }

        const patientID = button.getAttribute('data-patient-id') || "N/A";
        const patientName = button.getAttribute('data-patient-name') || "N/A";
        const patientPhone = button.getAttribute('data-patient-phone') || "N/A";
        const patientEmail = button.getAttribute('data-patient-email') || "N/A";
        const patientAddress = button.getAttribute('data-patient-address') || "N/A";
        const patientLatestVisit = button.getAttribute('data-patient-latest-visit') || "N/A";

        document.getElementById('appointmentDetailsPatientID').value = patientID;
        document.getElementById('appointmentDetailsPatientName').value = patientName;
        document.getElementById('appointmentDetailsPatientPhone').value = patientPhone;
        document.getElementById('appointmentDetailsPatientEmail').value = patientEmail;
        document.getElementById('appointmentDetailsPatientAddress').value = patientAddress;
        document.getElementById('appointmentDetailsPatientLatestVisit').value = patientLatestVisit;

        const modalElement = document.getElementById('appointmentDetailsModal');
        if (!modalElement) {
            console.error('Modal element not found: appointmentDetailsModal');
            return;
        }

        const modal = new bootstrap.Modal(modalElement);
        modal.show();
    }



    function markAsDone() {
        if (selectedRow) {
            // Update the status cell to "Completed Health Check"
            const statusCell = selectedRow.cells[4];
            statusCell.innerHTML = '<span class="btn btn-sm btn-outline-dark px-4">Details</span>';

            // Move the row to the end of the table body
            const tableBody = selectedRow.parentElement;
            tableBody.appendChild(selectedRow);

            // Close the modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('healthCheckModal'));
            modal.hide();

            // Reset the selected row
            selectedRow = null;
        }
    }
</script>